---
layout: post
title:      "An Attempt at a Ruby CLI App/Gem, A Project for School"
date:       2018-02-18 11:23:05 +0000
permalink:  an_attempt_at_a_ruby_cli_app_gem_a_project_for_school
---


First, I am going to start of with some simple housekeeping notes on this project and what I was attempting before rolling into the weeds…
My initial thought process on this was innocent and (quite) naive. I chose a website that I didn’t know very much about, but I believed I had a pretty good idea on why I wanted to use it. The website in question is the SEC’s (Securities and Exchange Commission) database for companies and investors that are required to report annual and quarterly reports about their investments. The website is kind of tricky to navigate and I thought it would be cool to be able to pull information from it in a different, more user friendly format.
It became quickly apparent that to accomplish this I would need more knowledge, experience, and tools to create a robust app of this nature. So, I decided just to use it to pull information on one investor, Warren Buffet (Berkshire Hathaway Inc). 
Using just a basic understanding of Ruby and website scrapping I jumped right in. I didn’t check the depth of the pool I was jumping into, the temperature, or the possible wild-life in the water. Let’s just say the environment was austere.
I started off with the heavy lifting. Scraping. It took the longest time to get through and after many learning experiences I (kind of) figured out how to navigate the website’s index pages to pull the information that I wanted to provide. My goal was to be able to scrape the website for form 13F-HR’s submitted by Berkshire Hathaway Inc. and return the information from the report; thus, giving you an idea of the current or former portfolio of the investing guru. Cool idea, right? Well, it’s still a cool idea. Just more difficult than I imagined.
After completing all the coding for the scraping portion of the app I had to then move over to the user side and start stubbing out what I wanted it to do and what I wanted the user to see. I have never been one to take the most pragmatic approach in my endeavors. I won’t say that I completely shoot from the hip (there is some forethought) but I do tend to learn by making mistakes. One of which was apparent when I started working on the user portion of the app. I should have started there. I should have worked from this point and built to the scraper so I would best know how to retrieve my information and present it. In this specific case I don’t think it mattered too much because what I was trying to accomplish was a little more complicated than my particular know-how. That’s what google is for, right?
The project was directed at showing my understanding of Object Orientation in ruby. This meant that not only did I have to create the user interface but I needed the back-end to work with objects and not just hashes full of information. Of course, that is what my scraper returned, arrays and hashes full of information. No biggie. I just needed to push all of the information into objects. 
I had my ‘investor’ (Berkshire Hathaway Inc) so I made a class for investors. Then I have the information that comes from his filings. Well, there are companies that he purchases in those reports so I have ‘companies’ as well. The reports themselves are kind of an object too, right? They hold both and investor and the companies that they are reporting buying stocks in. Alright! 
Now I have three different classes: the investor, the companies, and the reports. So, the investors owns stocks of these companies and has many companies through the reports that he is filing. The investor probably has more than one report so he owns several reports. In this particular project/exercise I attempted to make all my objects relate to each other in some way. 
This task ended up being a bit more than I believe I was able to complete. In a perfect world the investor object would also have companies that he owned stocks in and would show changes to the stocks based off of the reports that are given to the SEC. However, it is difficult to tell whether stocks were sold or not with the form 13F-HR, which is the form that I am using to get information from the site. I double checked the information with other websites that post current pictures of the portfolio and they too seem to pull information from that same form. Because of this I did not add a direct relationship to the companies for the investors object for fear of having it return false information. Instead it returns the same information that can be found on the SEC website.
The app itself goes through several different layers of the website to retrieve information. When it greats the user it asks if they want to see the most current report (current holdings) or if they would like to see holdings from a different year. It produces the available years and then asks the user to specify a quarter. When they put in the quarter it then takes those parameters and searches the index pages of the site for the correct information. 
Now, not all the quarters have the 13F-HR form. I believe it may only be an annual or bi-annual filing. I am unsure of that exactly as I was too busy silently yelling at my coding to research that. Instead, I decided to make a custom error that gets raised when the correct data could not be found. I am sure that I did it incorrectly (or that there is a better, more elegant way of doing it) but I tried finding the best spot to raise the error if it occurs and let the user know that the information wasn’t available and ask them if they wish to try a different year and quarter.
About testing and spec… I probably could have done more of that. Hell, I probably should have wrote out tests for every thing that I did. However, I didn’t. Mostly because I don’t know how to and the 20 minutes or so I spent looking up how to do it best on Google didn’t render me the results that I needed. I can appreciate that test driven development is probably the best way to go but I would have spent more time on figuring out how to do that then I had on the project itself. I did all my testing with the ‘pry’ gem and good ol’ IRB. I did link it to Travis CI though. That was cool.
Oh yeah, I probably didn’t make commits as often as I should have either. I attempted to make them every time I made a change that actually worked. The app itself runs really slow. I’m not sure if that is because of the god-awful internet speeds here in Baghdad or if it is because it is attempting to scrape through entirely WAY too much information. I am leaning towards a little bit of both, personally. Either way, I should have made those commits more often. Bad Larry. I’m Larry by the way, in case I forgot to introduce myself.
That just about sums up my little app that I created. I started off with lofty goals. A couple of days into it I realized I should have done something simpler but I’m hard headed and I don’t deal with defeat well so I just dug in and pushed forward. It’s not pretty but it functions. A link to my GitHub repository can be found [here].``
